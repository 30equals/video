<?php
// $Id$

/**
 * @file
 * Enable image support for video module.
 *
 * @author Fabio Varesano <fvaresano at yahoo dot it>
 */


/**
 * Implementation of hook_help().
 */
function video_image_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enable thumbnails support for video module.');
  }
}

/**
 * Implementation of hook_menu()
 */
function video_image_menu($may_cache) {
  $items = array();
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/content/video/image',
      'title' => t('video image'),
      'description' => t('administer video_image module settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('video_image_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

/**
 * Validation for settings form
 */
function video_image_admin_settings_validate($form_id, &$form_values, &$form) {
  if ($form_values['video_image_auto_thumbnail']) {
    if (function_exists('is_executable')) {
      $test = 'is_executable';
    } else {
      $test = 'file_exists';
    }
    if (!$test($form_values['video_image_ffmpeg_path'])) {
      form_set_error('video_image_ffmpeg_path', t('Set correct path for ffmpeg'));
    }
    if (!is_numeric($form_values['video_image_auto_thumbnail_seek'])) {
      form_set_error('video_image_auto_thumbnail_seek', t('Seek time must be an integer'));
    }
  }
}

/**
 * Settings form
 */
function video_image_admin_settings() {
  if (module_exists('video_upload')) {
    if (variable_get('video_image_auto_thumbnail', 0)) {
      $upload_weight = db_result(db_query("SELECT weight FROM {system} WHERE name='video_upload'"));
      db_query("UPDATE {system} SET weight=".($upload_weight+1)." WHERE name='video_image'");
    }
  }
  $form = array();
  $form['video_image_publish_thumbnail'] = array(
      '#type' => 'checkbox',
      '#title' => t('Publish the video thumbnails'),
      '#description' => t('Checking this value will cause the video thumbnail image nodes to be published and therefore could show up in blocks.  Usually, this is not what you want because then you could end up with both the thumbnail node and the video node showing up and since there is no way to link the image node to the video node, this is not desirable.  However, with this unchecked, the administrator will end up with a lot of unpublished nodes.'),
      '#default_value' => _video_publish_thumbnails(),
    );
  $form['video_image_promote_thumbnail'] = array(
      '#type' => 'checkbox',
      '#title' => t('Promote the thumbnails to the front page'),
      '#default_value' => _video_promote_thumbnails(),
    );
  $form['autothumb'] = array(
          '#type' => 'fieldset',
          '#title' => t('Automatic video thumbnailing'),
      );
  $form['autothumb']['video_image_auto_thumbnail'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto thumbnail for videos (using ffmpeg)'),
      '#description' => t('This requires setting the path to the ffmpeg executable below.  If set up correctly, this will auto-generate a thumbnail for each video created.'),
      '#default_value' => variable_get('video_image_auto_thumbnail', false),
    );
  $form['autothumb']['video_image_auto_thumbnail_only'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use auto-thumbnailer exclusively for video images'),
      '#description' => t('If checked, this will disable the file upload box for the user-supplied thumbnail.  Only check this if you have checked to be sure that auto-thumbnailing works.  Auto thumbnail must be selected for this to be enabled.'),
      '#default_value' => variable_get('video_image_auto_thumbnail_only', false),
      '#disabled' => !variable_get('video_image_auto_thumbnail', false),
    );
  $form['autothumb']['video_image_auto_thumbnail_seek'] = array(
      '#type' => 'textfield',
      '#title' => t('Video seek offset for thumbnail'),
      '#description' => t('Time in seconds to seek into video before extracting the thumbnail'),
      '#default_value' => variable_get('video_image_auto_thumbnail_seek', 2),
    );
  $form['autothumb']['video_image_ffmpeg_path'] = array(
      '#type' => 'textfield',
      '#title' => t('ffmpeg executable path'),
      '#description' => t('Set the full path to the ffmpeg executable here to enable automatic thumbnailing of videos'),
      '#default_value' => variable_get('video_image_ffmpeg_path', '/usr/bin/ffmpeg'),
    );
  $form['autothumb']['video_image_auto_thumbnail_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Debug auto-thumbnail process'),
      '#default_value' => variable_get('video_image_auto_thumbnail_debug', false),
    );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter()
 */
function video_image_form_alter($form_id, &$form) {

  if($form_id == 'video_node_form') {

    $node = $form['#node'];
    $value = ($node->new_image) ? '#value' : '#default_value';
    $form['iid'] = array('#type' => 'hidden', $value => $node->iid);

    if (function_exists('_image_check_settings')) {
      _image_check_settings();
      $form['#attributes'] = array("enctype" => "multipart/form-data");

     if (!variable_get('video_image_auto_thumbnail_only', false)) {
        $form['image'] = array('#type' => 'fieldset', '#title' => t('Image thumbnails'), '#collapsible' => TRUE, '#collapsed' => TRUE, '#weight' => -17, '#description' => t('Use this form to upload an image.'));

        $form['image']['image'] = array('#type' => 'file', '#title' => t('Image'));
        $form['image']['image_title'] = array('#type' => 'textfield', '#title' => t('Image title'), '#default_value' => $node->image->image_title);
      }
    }
  }

}


/**
 * Implementation of hook_nodeapi()
 */
function video_image_nodeapi(&$node, $op, $teaser) {
  if($node->type == 'video') {
    switch ($op) {
      case 'load': 
        $output['iid'] = $node->serial_data['iid'];
        return $output;
      case 'submit':
        $node->serial_data['iid'] = $node->iid;
      break;
      case 'prepare':
        if (variable_get('video_image_auto_thumbnail_debug', false) && variable_get('video_image_auto_thumbnail', false)) {
          drupal_set_message(t('video_image_nodeapi: prepare: ready to thumbnail image'));
        }
        $field_name = file_check_upload('image');
        $image->uid = $node->uid;
        $image->name = $node->name;
        $image->created = $node->created;
        $image->type = 'image';
        $image->status = _video_publish_thumbnails();
        $image->promote = _video_promote_thumbnails();
        if (!$field_name && variable_get('video_image_auto_thumbnail', false)) {
          $image->title = $_SESSION['video_upload_file']->filename;
          $field_name = _video_image_auto_thumbnail($node);
        }
        else {
          $image->title = $_POST['edit']['image_title'];
          $field_name = 'image';
        }
        image_prepare($image, $field_name);
        if ($image->images) {
          node_validate($image);
          if (!form_get_errors()) {
            $image = node_submit($image);
            node_save($image);
            $node->iid = $node->serial_data['iid'] = $image->nid;
            $_SESSION['video_upload_file']->iid = $image->nid;
            $node->new_image = TRUE;
          }
        }
        else if (isset($_SESSION['video_upload_file']->iid)) {
          $node->iid = $_SESSION['video_upload_file']->iid;
        }
      break;

      case 'view':
        if ($node->iid) {
          if($teaser) {
            $node->content['video_image_thumbnail'] = array('#value' => theme('video_image_teaser', $node));
          }
          else {
            $node->content['video_image_thumbnail'] = array('#value' => theme('video_image_body', $node));
          }
        }
        break;
      case 'delete':
        node_delete(array('nid' => $node->iid));
        break;
    }
  }
}


/**
 * Render the output for the node teaser.
 *
 * @param $node
 *   object with node information
 *
 * @return
 *   string of content to display
 */
function theme_video_image_teaser($node) {
  if($node->serial_data['iid']) {
    $image = node_load($node->serial_data['iid']);
    $image = image_display($image, 'thumbnail', array('class' => 'video_image_teaser'));
  }
  else { // only for backward compatibility
    $image = theme('image', $node->serial_data['image_teaser'], $node->title, $node->title, array('class' => 'video_image_teaser'), FALSE);
  }
  $output .= l($image, "node/$node->nid", array(), NULL, NULL, FALSE, TRUE); //Create a link with an image in it.
  $output .= $node->teaser . '<br class="video_image_clear" />';
  return $output;
}


/**
 * Generates the image HTML displayed in the Node body.
 *
 * @param $node
 *   object with node information
 *
 * @return
 *   string of content to display
 */
function theme_video_image_body($node) {
  if($node->serial_data['iid']) {
    $image = node_load($node->serial_data['iid']);
    $image = image_display($image, 'thumbnail');
  }
  else { // only for backward compatibility
    $image = theme('image', $node->serial_data['image_view'], $node->title, $node->title, array('class' => 'video_image_view'), FALSE); //Create image HTML
  }
  $output = l($image, "node/$node->nid/play", array('title' => t('play') . ' ' . $node->title), NULL, NULL, FALSE, TRUE); //Create link HTML with image in it.

  return $output;
}

/* Generates a thumbnail from the video file using ffmpeg
 *
 * @param $node
 *   object with node information
 *
 * @return
 *   a drupal file object
 */
function _video_image_auto_thumbnail(&$node) {
  if(empty($_SESSION['video_upload_file']) ||
      !$_SESSION['video_upload_file']->newfile ||
      $node->iid || $_SESSION['video_upload_file']->iid ||
      $_SESSION['video_upload_file']->thumbnailed) {
    if (variable_get('video_image_auto_thumbnail_debug', false)) {
      if (empty($_SESSION['video_upload_file']))
        drupal_set_message(t('no video has been uploaded: make sure that video_image weight is greater than video_upload weight; make sure that the video file is not too large to be uploaded.'));
    }
    return null;
  }
  $debug = variable_get('video_image_auto_thumbnail_debug', false);
  $videofile = escapeshellarg($_SESSION['video_upload_file']->filepath);
  $filepath = tempnam(file_directory_temp(), 'ffmpeg-thumb');
  $seek = variable_get('video_image_auto_thumbnail_seek', 2);
  $ffmpeg = variable_get('video_image_path_to_ffmpeg', '/usr/bin/ffmpeg');

  /* try the -vframes option first (newer versions of ffmpeg support this)
   * we use passthru so we can get the return value of ffmpeg to determine
   * if it was successful or not (return 0 == success)
   */
  $command = "$ffmpeg -i $videofile -an -y -f mjpeg -ss $seek -vframes 1 $filepath";
  ob_start();
  passthru($command." 2>&1", $ffmpeg_return);
  $ffmpeg_output = ob_get_contents();
  ob_end_clean();

  /* if we failed, we can try again, using the -t option instead of -vframes
   * older versions of ffmpeg don't support -vframes only -t
   */
  if ($return) {
    $command = "$ffmpeg -i $videofile -y -an -f mjpeg -ss $seek -t 0.001 $filepath";
    ob_start();
    passthru($command." 2>&1", $ffmpeg_return);
    $ffmpeg_output = ob_get_contents();
    ob_end_clean();
  }
  if ($debug) {
    drupal_set_message(t('ffmpeg command: ').$command);
    drupal_set_message(t('ffmpeg output: ')."<pre>\n$ffmpeg_output\n</pre>");
  }
  if (!file_exists($filepath)) {
    drupal_set_message(t('video_image_auto_thumbnail: file %file does not exist', array('%file' => $filepath)), 'error');
  }
  $file = array(
      'filename' => $_SESSION['video_upload_file']->filename . ".video-thumb.jpg",
      'filemime' => 'image/jpeg',
      'filesize' => filesize($filepath),
      'filepath' => $filepath,
      'nid' => $node->nid,
      );
  $_SESSION['video_upload_file']->thumbnailed = TRUE;
  if ($debug) {
    if ($ffmpeg_return) {
      drupal_set_message(t('ffmpeg failed to thumbnail video'));
    } else {
      drupal_set_message(t('Successfully thumbnailed video'));
    }
  }
  return (object)$file;
}

/* If the user has set a promote preference, use that, otherwise return
 * if 'promote' is set in the drupal content type settings
 *
 * @return
 *   Returns whether we should promote thumbnails or not
 */
function _video_promote_thumbnails() {
  $settings_override = variable_get('video_image_promote_thumbnail', NULL);
  if ($settings_override === NULL) {
    $node_options = variable_get('node_options_image', array('status', 'promote'));
    return in_array('promote', $node_options);
  }
  return $settings_override;
}

/* If the user has set a publish preference, use that, otherwise return
 * if 'status' is set in the drupal content type settings
 *
 * @return
 *   Returns whether we should publish thumbnails or not
 */
function _video_publish_thumbnails() {
  $settings_override = variable_get('video_image_publish_thumbnail', NULL);
  if ($settings_override === NULL) {
    $node_options = variable_get('node_options_image', array('status', 'promote'));
    return in_array('status', $node_options);
  }
  return $settings_override;
}
?>
